/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.glolabs.verkundenbot.cloud.controller;

import com.glolabs.verkundenbot.cloud.persistence.model.Device;
import com.glolabs.verkundenbot.cloud.persistence.model.Devices;
import com.glolabs.verkundenbot.cloud.persistence.model.ErrorResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-02-07T03:16:15.186Z[GMT]")
@Api(value = "device", description = "the device API")
public interface IDevice {

    @ApiOperation(value = "", nickname = "getDeviceByUuid", notes = "returns the specified registered device", response = Device.class, tags={ "Devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A paginated list of devices", response = Device.class),
        @ApiResponse(code = 400, message = "Invalid page supplied", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Access Denied", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Page not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/device/{uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Device> getDeviceByUuid(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "the uuid of the device requested",required=true) @PathVariable("uuid") UUID uuid,@ApiParam(value = "which set of devices to return") @Valid @RequestParam(value = "page", required = false) Integer page);


    @ApiOperation(value = "", nickname = "getDevices", notes = "returns all registered devices", response = Devices.class, tags={ "Devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A paginated list of devices", response = Devices.class),
        @ApiResponse(code = 400, message = "Invalid page supplied", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Access Denied", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Page not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/device",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Devices> getDevices(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "which set of devices to return") @Valid @RequestParam(value = "page", required = false) Integer page);


    @ApiOperation(value = "", nickname = "registerDevice", notes = "Register a new device", response = Device.class, tags={ "Devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully registered device", response = Device.class),
        @ApiResponse(code = 400, message = "Invalid uuid supplied", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Access Denied", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Device not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/device",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Device> registerDevice(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = ""  )  @Valid @RequestBody Device body);

}
